using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace MFToolkit.AutoGenerator;

/// <summary>
/// 自动注入生成器
/// </summary>
[Generator]
public class AutoInjectGenerator : IIncrementalGenerator
{
    /// <summary>
    /// 初始化生成器
    /// </summary>
    /// <param name="context"></param>
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // 输出调试信息
        System.Diagnostics.Debug.WriteLine("AutoInjectGenerator initialized!");
        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (s, _) => s is ClassDeclarationSyntax,
                transform: static (ctx, _) => (ClassDeclarationSyntax)ctx.Node)
            .Where(c => c.AttributeLists.Count > 0);

        var compilation = context.CompilationProvider.Combine(provider.Collect());

        context.RegisterSourceOutput(compilation, (spc, source) =>
        {
            Execute(source.Left, source.Right, spc);
        });
    }

    private static void Execute(Compilation compilation, ImmutableArray<ClassDeclarationSyntax> classes, SourceProductionContext context)
    {
        if (classes.IsDefaultOrEmpty) return;

        var registrations = new List<ServiceRegistration>();
        var attributeSymbol = compilation.GetTypeByMetadataName("MFToolkit.AutoAttribute.AutoInjectAttribute`1");
        var nonGenericAttributeSymbol = compilation.GetTypeByMetadataName("MFToolkit.AutoAttribute.AutoInjectAttribute");

        foreach (var classDecl in classes.Distinct())
        {
            var model = compilation.GetSemanticModel(classDecl.SyntaxTree);
            var classSymbol = model.GetDeclaredSymbol(classDecl) as INamedTypeSymbol;

            if (classSymbol == null || classSymbol.IsAbstract || classSymbol.IsStatic) continue;

            var attributes = classSymbol.GetAttributes()
                .Where(a => a.AttributeClass != null &&
                    (a.AttributeClass.OriginalDefinition?.Equals(attributeSymbol, SymbolEqualityComparer.Default) == true ||
                     a.AttributeClass.Equals(nonGenericAttributeSymbol, SymbolEqualityComparer.Default)))
                .ToList();

            foreach (var attribute in attributes)
            {
                var registration = ParseAttribute(classSymbol, attribute);
                if (registration != null)
                {
                    registrations.Add(registration);
                }
            }
        }

        GenerateSource(context, registrations);
    }

    private static ServiceRegistration? ParseAttribute(INamedTypeSymbol classSymbol, AttributeData attribute)
    {
        var serviceType = GetServiceType(attribute);
        var serviceKey = GetServiceKey(attribute);
        var lifetime = GetLifetime(attribute);

        if (serviceType == null && attribute.AttributeClass?.IsGenericType == true)
        {
            serviceType = attribute.AttributeClass.TypeArguments[0];
        }

        if (serviceType == null)
        {
            serviceType = classSymbol;
        }

        // 计算目标命名空间
        string originalNamespace = classSymbol.ContainingNamespace.ToDisplayString(); // 如 "Demo.DemoModel"
        string targetNamespace = GetTargetNamespace(originalNamespace); // 转换为 "Demo.AutoGenerated"

        return new ServiceRegistration(
            serviceType ?? classSymbol,
            classSymbol,
            serviceKey,
            lifetime,
            targetNamespace
        );
    }

    private static string GetTargetNamespace(string originalNamespace)
    {
        // 分割命名空间层级（如 ["Demo", "DemoModel"]）
        var parts = originalNamespace.Split('.');
        if (parts.Length == 0) return "AutoGenerated"; // 根命名空间处理
                                                       // 提取父级命名空间（去掉最后一级）并拼接 "AutoGenerated"
        var parentNamespace = parts[0];
        return string.IsNullOrEmpty(parentNamespace)
            ? "AutoGenerated"
            : $"{parentNamespace}.AutoGenerated";
    }


    private static ITypeSymbol? GetServiceType(AttributeData attribute)
    {
        if (attribute.ConstructorArguments.Length > 0 &&
            attribute.ConstructorArguments[0].Value is ITypeSymbol typeSymbol)
        {
            return typeSymbol;
        }
        return null;
    }

    //private static string? GetServiceKey(AttributeData attribute)
    //{
    //    if (attribute.ConstructorArguments.Length > 1 &&
    //        attribute.ConstructorArguments[1].Value is string key)
    //    {
    //        return key;
    //    }
    //    return null;
    //}

    private static string? GetServiceKey(AttributeData attribute)
    {
        if (attribute.ConstructorArguments.Length > 0 &&
            attribute.ConstructorArguments[0].Value is string key)
        {
            return key;
        }
        return null;
    }

    //private static Lifetime GetLifetime(AttributeData attribute)
    //{
    //    if (attribute.ConstructorArguments.Length > 2 &&
    //        attribute.ConstructorArguments[2].Value is int lifetime)
    //    {
    //        return (Lifetime)lifetime;
    //    }
    //    return Lifetime.Transient;
    //}

    private static Lifetime GetLifetime(AttributeData attribute)
    {
        if (attribute.ConstructorArguments.Length > 1 &&
            attribute.ConstructorArguments[1].Value is int lifetime)
        {
            return (Lifetime)lifetime;
        }
        return Lifetime.Transient;
    }

    private static void GenerateSource(
    SourceProductionContext context,
    IEnumerable<ServiceRegistration> registrations
)
    {
        // 按目标命名空间分组
        var groupedRegistrations = registrations
            .GroupBy(r => r.TargetNamespace)
            .ToList();

        foreach (var group in groupedRegistrations)
        {
            string targetNamespace = group.Key; // 如 "Demo.AutoGenerated"
            var registrationsInGroup = group.ToList();

            // 生成代码模板
            var source = $@"
//------------------------------------------------------------------------------
// <auto-generated>
//     这段代码是由一个工具生成的。
//
//     对该文件的更改可能导致不正确的行为，并且在重新生成代码时将丢失该文件。
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Extensions.DependencyInjection;
using System.Runtime.CompilerServices;

namespace {targetNamespace}
{{
    public static class AutoInjectExtensions
    {{
        [CompilerGenerated]
        public static IServiceCollection AddAutoInjectServices(this IServiceCollection services)
        {{

            {BuildRegistrationCode(registrationsInGroup).Replace("\n", "\n            ")}
            return services;
        }}
    }}
}}";

            // 生成文件名（如 "Demo.AutoGenerated.AutoInject.g.cs"）
            string fileName = $"{targetNamespace}.AutoInject.g.cs";
            context.AddSource(fileName, SourceText.From(source, Encoding.UTF8));
        }
    }

    private static string BuildRegistrationCode(IEnumerable<ServiceRegistration> registrations)
    {
        var sb = new StringBuilder();

        foreach (var reg in registrations)
        {
            var serviceType = reg.ServiceType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            var implementationType = reg.ImplementationType.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
            var isGeneric = reg.ServiceType is INamedTypeSymbol { IsGenericType: true };

            var method = reg.Lifetime switch
            {
                Lifetime.Singleton => "AddSingleton",
                Lifetime.Scoped => "AddScoped",
                _ => "AddTransient"
            };

            var keyMethod = reg.Lifetime switch
            {
                Lifetime.Singleton => "AddKeyedSingleton",
                Lifetime.Scoped => "AddKeyedScoped",
                _ => "AddKeyedTransient"
            };

            if (!string.IsNullOrEmpty(reg.ServiceKey))
            {
                if (!string.IsNullOrWhiteSpace(implementationType) && serviceType != implementationType)
                    sb.AppendLine($@"services.{keyMethod}<{serviceType},{implementationType}>(""{reg.ServiceKey}"");");
                else
                    sb.AppendLine($@"services.{keyMethod}<{serviceType}>(""{reg.ServiceKey}"");");
            }
            else if (isGeneric)
            {
                sb.AppendLine(
                    $@"services.{method}(typeof({serviceType}), typeof({implementationType}));");
            }
            else if (serviceType != implementationType)
            {
                sb.AppendLine(
                    $@"services.{method}<{serviceType}, {implementationType}>();");
            }
            else
            {
                sb.AppendLine(
                    $@"services.{method}<{serviceType}>();");
            }
        }

        return sb.ToString();
    }

    private class ServiceRegistration(
        ITypeSymbol serviceType,
        INamedTypeSymbol implementationType,
        string? serviceKey,
        Lifetime lifetime,
        string targetNamespace
    )
    {
        public ITypeSymbol ServiceType { get; set; } = serviceType;
        public INamedTypeSymbol ImplementationType { get; set; } = implementationType;
        public string? ServiceKey { get; set; } = serviceKey;
        public Lifetime Lifetime { get; set; } = lifetime;
        public string TargetNamespace { get; } = targetNamespace; // 新增属性
    }
}